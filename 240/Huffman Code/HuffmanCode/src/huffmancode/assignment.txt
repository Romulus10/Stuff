package huffmancode;

/**
 *
 * @author Sean Batzel I was having an issue where Dictionary.get() was not
 * retrieving "space" characters correctly. I dealt with it by having the
 * program substitute underscores for spaces, encoding the string that way. A
 * decoder would need to account for spaces being represented as underscores. As
 * of 5/5/2016 at 21:40, this works correctly, but not with an optimal Huffman
 * tree.
 * It's now 23:50, still not optimal.
 * Very not optimal.
 */
public class HuffmanCode {

    private static Dictionary<Character, String> hash;

    public static HuffmanTree buildTree(int[] letters) {
        Queue<HuffmanTree> q = new Queue<>();
        for (int i = 0; i < letters.length; i++) {
            if (letters[i] > 0) {
                q.enqueue(new HuffmanLeaf(letters[i], ((char) i)));
            }
        }
        assert q.size() > 0;
        while (q.size() > 1) {
            HuffmanTree one = q.dequeue();
            HuffmanTree two = q.dequeue();
            q.enqueue(new HuffmanNode(one, two));
        }
        return q.dequeue();
    }

    public static void displayTree(HuffmanTree tree, StringBuffer stuff) {
        assert tree != null;
        if (tree instanceof HuffmanLeaf) {
            HuffmanLeaf leaf = (HuffmanLeaf) tree;
            print(leaf.value + "\t" + leaf.frequency + "\t\t" + stuff);
            String intermediate = stuff.toString();
            intermediate = StringUtilities.removeLeadingZeros(intermediate);
            hash.add(leaf.value, intermediate);
        } else if (tree instanceof HuffmanNode) {
            HuffmanNode node = (HuffmanNode) tree;
            stuff.append('0');
            displayTree(node.left, stuff);
            stuff.deleteCharAt(stuff.length() - 1);
            stuff.append('1');
            displayTree(node.right, stuff);
            stuff.deleteCharAt(stuff.length() - 1);
        }
    }

    public static void main(String[] args) {
        String[] strings = {"just as fire tempers iron into fine steel so does adversity temper ones character into firmness tolerance and determination", "someone is sitting in the shade today because someone planted a tree a long time ago"};
        for (String x : strings) {
            char[] z = x.toCharArray();
            for (int y = 0; y < z.length; y++) {
                if (z[y] == ' ') {
                    z[y] = '_';
                }
            }
            StringBuilder wait = new StringBuilder();
            for (int i = 0; i < z.length; i++) {
                wait.append(z[i]);
            }
            String fixed = wait.toString();
            hash = new Dictionary();
            putchar("\n");
            String input = fixed;
            int[] letters = new int[256];
            for (char c : input.toCharArray()) {
                letters[c]++;
            }
            HuffmanTree tree = buildTree(letters);
            print("SYMBOL\tFREQUENCY\tHUFFMAN CODE");
            displayTree(tree, new StringBuffer());
            putchar("\n");
            StringBuilder output = new StringBuilder();
            print("Original: ");
            for (int i = 0; i < input.length(); i++) {
                if (input.charAt(i) == '_') {
                    putchar(" ");
                } else {
                    putchar(input.charAt(i));
                }
            }
            putchar("\n");
            print("Size: " + (input.length() * 8) + " bits.");
            putchar("\n");
            print("Encoded: ");
            for (char c : input.toCharArray()) {
                String as = hash.get(c);
                putchar(as + " ");
                output.append(as);
            }
            putchar("\n");
            output.toString();
            print("Binary String Length: " + output.length() + " bits.");
            putchar("\n");
        }
    }

    public static void print(String x) {
        System.out.println(x);
    }

    public static void putchar(String x) {
        System.out.print(x);
    }

    public static void putchar(char x) {
        System.out.print(x);
    }
}

package huffmancode;

/**
 *
 * @author Sean Batzel
 */
public class StringUtilities {

    public static String removeLeadingZeros(String x) {
        int y = 0;
        while (x.charAt(y) != 1 && y < x.length() - 2) {
            if (x.charAt(y) == 0) {
                x = x.replace(Character.toString(x.charAt(y)), "");
            }
            if (x.charAt(y) == 1) {
                break;
            }
            y++;
        }
        return x;
    }
}

package huffmancode;

/**
 *
 * @author Sean Batzel
 * @param <T>
 */
public class Queue<T> {

    private Node<T> head;
    private Node<T> current;
    private int size;

    public void enqueue(T val) {
        if (size == 0) {
            head = new Node<>();
            current = new Node<>();
            head.ref = current;
            current.value = val;
            size++;
        } else {
            Node<T> temp = new Node<>();
            current.ref = temp;
            current = temp;
            current.value = val;
            size++;
        }
    }

    public T dequeue() {
        if (size != 0) {
            Node<T> temp;
            T tempVal;
            temp = head.ref;
            tempVal = temp.value;
            head = head.ref;
            size--;
            return tempVal;
        } else {
            return null;
        }
    }

    public T look() {
        try {
            return head.ref.value;
        } catch (NullPointerException e) {
            return null;
        }
    }

    public int size() {
        return size;
    }
}

package huffmancode;

/**
 *
 * @author Sean Batzel
 * @param <T>
 */
public class Node<T> {

    public T value;
    public Node<T> ref;

    public Node() {
        this.ref = null;
    }
}
package huffmancode;

/**
 *
 * @author Sean Batzel
 */
public abstract class HuffmanTree implements Comparable<HuffmanTree> {

    public final int frequency;

    public HuffmanTree(int frequency) {
        this.frequency = frequency;
    }

    @Override
    public int compareTo(HuffmanTree tree) {
        return frequency - tree.frequency;
    }
}

package huffmancode;

/**
 *
 * @author Sean Batzel
 */
public class HuffmanNode extends HuffmanTree {

    public final HuffmanTree left, right;

    public HuffmanNode(HuffmanTree left, HuffmanTree right) {
        super(left.frequency + right.frequency);
        this.left = left;
        this.right = right;
    }
}

package huffmancode;

/**
 *
 * @author Sean Batzel
 */
public class HuffmanLeaf extends HuffmanTree {

    public final char value;

    public HuffmanLeaf(int frequency, char value) {
        super(frequency);
        this.value = value;
    }
}

package huffmancode;

/**
 *
 * @author Sean Batzel
 * @param <K>
 * @param <V>
 */
public class Dictionary<K, V> {

    Entry head;
    Entry current;

    public Dictionary() {
        head = new Entry(' ', null);
        current = head;
    }

    public void add(K key, V value) {
        current.next = new Entry(key, value);
        current = current.next;
    }

    public V get(K key) {
        Entry tmp = head;
        V value = null;
        while (tmp.key != key) {
            tmp = tmp.next;
            try {
                if (tmp.key == key) {
                    break;
                }
            } catch (NullPointerException e) {
                break;
            }
        }
        try {
            value = (V) tmp.value;
        } catch (NullPointerException e) {
        }
        if (value != null) {
            return value;
        } else {
            value = (V) "";
            return value;
        }
    }

    public void printMap() {
        Entry tmp = head.next;
        while (tmp.next != null) {
            System.out.println(tmp.key + ": " + tmp.value);
            tmp = tmp.next;
        }
        System.out.println(tmp.key + ": " + tmp.value);
    }
}

package huffmancode;

/**
 *
 * @author Sean Batzel
 * @param <K>
 * @param <V>
 */
public class Entry<K, V> {

    public K key;
    public V value;
    public Entry next;

    public Entry(K key, V value) {
        this.key = key;
        this.value = value;
    }
}

run:

SYMBOL	FREQUENCY	HUFFMAN CODE
j	1		0000
l	2		0001
m	4		0010
n	10		0011
o	8		0100
p	2		0101
r	10		0110
s	10		0111
t	11		1000
u	1		1001
v	1		1010
y	1		1011
_	18		11000
a	7		11001
c	3		11010
d	4		11011
e	17		11100
f	3		11101
h	1		11110
i	9		11111

Original: 
just as fire tempers iron into fine steel so does adversity temper ones character into firmness tolerance and determination
Size: 984 bits.

Encoded: 
0000 1001 0111 1000 11000 11001 0111 11000 11101 11111 0110 11100 11000 1000 11100 0010 0101 11100 0110 0111 11000 11111 0110 0100 0011 11000 11111 0011 1000 0100 11000 11101 11111 0011 11100 11000 0111 1000 11100 11100 0001 11000 0111 0100 11000 11011 0100 11100 0111 11000 11001 11011 1010 11100 0110 0111 11111 1000 1011 11000 1000 11100 0010 0101 11100 0110 11000 0100 0011 11100 0111 11000 11010 11110 11001 0110 11001 11010 1000 11100 0110 11000 11111 0011 1000 0100 11000 11101 11111 0110 0010 0011 11100 0111 0111 11000 1000 0100 0001 11100 0110 11001 0011 11010 11100 11000 11001 0011 11011 11000 11011 11100 1000 11100 0110 0010 11111 0011 11001 1000 11111 0100 0011 
Binary String Length: 554 bits.


SYMBOL	FREQUENCY	HUFFMAN CODE
g	3		0000
h	2		0001
i	5		0010
l	2		0011
m	3		0100
n	6		0101
o	7		0110
p	1		0111
r	1		1000
s	6		1001
t	7		1010
u	1		1011
y	1		1100
_	15		11010
a	7		11011
b	1		11100
c	1		11101
d	3		11110
e	12		11111

Original: 
someone is sitting in the shade today because someone planted a tree a long time ago
Size: 672 bits.

Encoded: 
1001 0110 0100 11111 0110 0101 11111 11010 0010 1001 11010 1001 0010 1010 1010 0010 0101 0000 11010 0010 0101 11010 1010 0001 11111 11010 1001 0001 11011 11110 11111 11010 1010 0110 11110 11011 1100 11010 11100 11111 11101 11011 1011 1001 11111 11010 1001 0110 0100 11111 0110 0101 11111 11010 0111 0011 11011 0101 1010 11111 11110 11010 11011 11010 1010 1000 11111 11111 11010 11011 11010 0011 0110 0101 0000 11010 1010 0010 0100 11111 11010 11011 0000 0110 
Binary String Length: 375 bits.

BUILD SUCCESSFUL (total time: 0 seconds)
