package huffmancode;

import java.util.PriorityQueue;

/**
 *
 * @author Sean Batzel 
 * 
 * Resubmission
 * 
 * I was having an issue where Dictionary.get() was not
 * retrieving "space" characters correctly. I dealt with it by having the
 * program substitute underscores for spaces, encoding the string that way. A
 * decoder would need to account for spaces being represented as underscores. As
 * of 5/5/2016 at 21:40, this works correctly, but not with an optimal Huffman
 * tree.
 * It's now 23:50, still not optimal.
 * Very not optimal.
 * 
 * Update - My initial research into this problem seemed to indicate that a
 * priority queue was the best way to go for actually building the tree.
 * It just occurred to me that my implementation of the queue was *not* 
 * prioritized. That should solve the problem.
 */
public class HuffmanCode {

    private static Dictionary<Character, String> hash;

    public static HuffmanTree buildTree(int[] letters) {
        PriorityQueue<HuffmanTree> q = new PriorityQueue<>();
        for (int i = 0; i < letters.length; i++) {
            if (letters[i] > 0) {
                q.offer(new HuffmanLeaf(letters[i], ((char) i)));
            }
        }
        assert q.size() > 0;
        while (q.size() > 1) {
            HuffmanTree one = q.poll();
            HuffmanTree two = q.poll();
            q.offer(new HuffmanNode(one, two));
        }
        return q.poll();
    }

    public static void displayTree(HuffmanTree tree, StringBuffer stuff) {
        assert tree != null;
        if (tree instanceof HuffmanLeaf) {
            HuffmanLeaf leaf = (HuffmanLeaf) tree;
            print(leaf.value + "\t" + leaf.frequency + "\t\t" + stuff);
            String intermediate = stuff.toString();
            intermediate = StringUtilities.removeLeadingZeros(intermediate);
            hash.add(leaf.value, intermediate);
        } else if (tree instanceof HuffmanNode) {
            HuffmanNode node = (HuffmanNode) tree;
            stuff.append('0');
            displayTree(node.left, stuff);
            stuff.deleteCharAt(stuff.length() - 1);
            stuff.append('1');
            displayTree(node.right, stuff);
            stuff.deleteCharAt(stuff.length() - 1);
        }
    }

    public static void main(String[] args) {
        String[] strings = {"just as fire tempers iron into fine steel so does adversity temper ones character into firmness tolerance and determination", "someone is sitting in the shade today because someone planted a tree a long time ago"};
        for (String x : strings) {
            char[] z = x.toCharArray();
            for (int y = 0; y < z.length; y++) {
                if (z[y] == ' ') {
                    z[y] = '_';
                }
            }
            StringBuilder wait = new StringBuilder();
            for (int i = 0; i < z.length; i++) {
                wait.append(z[i]);
            }
            String fixed = wait.toString();
            hash = new Dictionary();
            putchar("\n");
            String input = fixed;
            int[] letters = new int[256];
            for (char c : input.toCharArray()) {
                letters[c]++;
            }
            HuffmanTree tree = buildTree(letters);
            print("SYMBOL\tFREQUENCY\tHUFFMAN CODE");
            displayTree(tree, new StringBuffer());
            putchar("\n");
            StringBuilder output = new StringBuilder();
            print("Original: ");
            for (int i = 0; i < input.length(); i++) {
                if (input.charAt(i) == '_') {
                    putchar(" ");
                } else {
                    putchar(input.charAt(i));
                }
            }
            putchar("\n");
            print("Size: " + (input.length() * 8) + " bits.");
            putchar("\n");
            print("Encoded: ");
            for (char c : input.toCharArray()) {
                String as = hash.get(c);
                putchar(as + " ");
                output.append(as);
            }
            putchar("\n");
            output.toString();
            print("Binary String Length: " + output.length() + " bits.");
            putchar("\n");
        }
    }

    public static void print(String x) {
        System.out.println(x);
    }

    public static void putchar(String x) {
        System.out.print(x);
    }

    public static void putchar(char x) {
        System.out.print(x);
    }
}

package huffmancode;

/**
 *
 * @author Sean Batzel
 */
public abstract class HuffmanTree implements Comparable<HuffmanTree> {

    public final int frequency;

    public HuffmanTree(int frequency) {
        this.frequency = frequency;
    }

    @Override
    public int compareTo(HuffmanTree tree) {
        return frequency - tree.frequency;
    }
}


package huffmancode;

/**
 *
 * @author Sean Batzel
 */
public class HuffmanNode extends HuffmanTree {

    public final HuffmanTree left, right;

    public HuffmanNode(HuffmanTree left, HuffmanTree right) {
        super(left.frequency + right.frequency);
        this.left = left;
        this.right = right;
    }
}

package huffmancode;

/**
 *
 * @author Sean Batzel
 */
public class HuffmanLeaf extends HuffmanTree {

    public final char value;

    public HuffmanLeaf(int frequency, char value) {
        super(frequency);
        this.value = value;
    }
}

package huffmancode;

/**
 *
 * @author Sean Batzel
 * @param <K>
 * @param <V>
 */
public class Dictionary<K, V> {

    Entry head;
    Entry current;

    public Dictionary() {
        head = new Entry(' ', null);
        current = head;
    }

    public void add(K key, V value) {
        current.next = new Entry(key, value);
        current = current.next;
    }

    public V get(K key) {
        Entry tmp = head;
        V value = null;
        while (tmp.key != key) {
            tmp = tmp.next;
            try {
                if (tmp.key == key) {
                    break;
                }
            } catch (NullPointerException e) {
                break;
            }
        }
        try {
            value = (V) tmp.value;
        } catch (NullPointerException e) {
        }
        if (value != null) {
            return value;
        } else {
            value = (V) "";
            return value;
        }
    }

    public void printMap() {
        Entry tmp = head.next;
        while (tmp.next != null) {
            System.out.println(tmp.key + ": " + tmp.value);
            tmp = tmp.next;
        }
        System.out.println(tmp.key + ": " + tmp.value);
    }
}

package huffmancode;

/**
 *
 * @author Sean Batzel
 * @param <K>
 * @param <V>
 */
public class Entry<K, V> {

    public K key;
    public V value;
    public Entry next;

    public Entry(K key, V value) {
        this.key = key;
        this.value = value;
    }
}

package huffmancode;

/**
 *
 * @author Sean Batzel
 */
public class StringUtilities {

    public static String removeLeadingZeros(String x) {
        int y = 0;
        while (x.charAt(y) != 1 && y < x.length() - 2) {
            if (x.charAt(y) == 0) {
                x = x.replace(Character.toString(x.charAt(y)), "");
            }
            if (x.charAt(y) == 1) {
                break;
            }
            y++;
        }
        return x;
    }
}

run:

SYMBOL	FREQUENCY	HUFFMAN CODE
n	10		000
t	11		001
c	3		01000
f	3		01001
a	7		0101
o	8		0110
d	4		01110
u	1		0111100
v	1		0111101
l	2		011111
e	17		100
i	9		1010
m	4		10110
p	2		101110
y	1		1011110
h	1		10111110
j	1		10111111
_	18		110
s	10		1110
r	10		1111

Original: 
just as fire tempers iron into fine steel so does adversity temper ones character into firmness tolerance and determination
Size: 984 bits.

Encoded: 
10111111 0111100 1110 001 110 0101 1110 110 01001 1010 1111 100 110 001 100 10110 101110 100 1111 1110 110 1010 1111 0110 000 110 1010 000 001 0110 110 01001 1010 000 100 110 1110 001 100 100 011111 110 1110 0110 110 01110 0110 100 1110 110 0101 01110 0111101 100 1111 1110 1010 001 1011110 110 001 100 10110 101110 100 1111 110 0110 000 100 1110 110 01000 10111110 0101 1111 0101 01000 001 100 1111 110 1010 000 001 0110 110 01001 1010 1111 10110 000 100 1110 1110 110 001 0110 011111 100 1111 0101 000 01000 100 110 0101 000 01110 110 01110 100 001 100 1111 10110 1010 000 0101 001 1010 0110 000 
Binary String Length: 475 bits.


SYMBOL	FREQUENCY	HUFFMAN CODE
_	15		00
u	1		010000
y	1		010001
p	1		010010
r	1		010011
h	2		01010
b	1		010110
c	1		010111
i	5		0110
l	2		01110
d	3		01111
s	6		1000
m	3		10010
g	3		10011
e	12		101
n	6		1100
o	7		1101
t	7		1110
a	7		1111

Original: 
someone is sitting in the shade today because someone planted a tree a long time ago
Size: 672 bits.

Encoded: 
1000 1101 10010 101 1101 1100 101 00 0110 1000 00 1000 0110 1110 1110 0110 1100 10011 00 0110 1100 00 1110 01010 101 00 1000 01010 1111 01111 101 00 1110 1101 01111 1111 010001 00 010110 101 010111 1111 010000 1000 101 00 1000 1101 10010 101 1101 1100 101 00 010010 01110 1111 1100 1110 101 01111 00 1111 00 1110 010011 101 101 00 1111 00 01110 1101 1100 10011 00 1110 0110 10010 101 00 1111 10011 1101 
Binary String Length: 319 bits.

BUILD SUCCESSFUL (total time: 0 seconds)
